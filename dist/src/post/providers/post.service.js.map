{"version":3,"file":"post.service.js","sourceRoot":"/","sources":["src/post/providers/post.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAkD;AAElD,6CAAmD;AAGnD,qCAAqC;AAMrC,2CAA8C;AAGvC,IAAM,WAAW,GAAjB,MAAM,WAAW;IACtB,YAEmB,cAAsC;QAAtC,mBAAc,GAAd,cAAc,CAAwB;IACtD,CAAC;IAEJ,KAAK,CAAC,aAAa,CAAC,uBAAgD;QAClE,IAAI,IAAI,GAAe;YACrB,MAAM,EAAE,IAAI;YACZ,KAAK,EAAE,uBAAuB,CAAC,KAAK;YACpC,IAAI,EAAE,uBAAuB,CAAC,IAAI;YAClC,MAAM,EAAE,uBAAuB,CAAC,MAAM;SACvC,CAAC;QAEF,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC;IAED,KAAK,CAAC,kBAAkB,CACtB,MAAc;QAEd,IAAI,QAAQ,GAAkC;YAC5C,KAAK,EAAE,CACL,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,CAC9D,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;gBACV,IAAI,IAAI,GAA+B;oBACrC,KAAK,EAAE,CAAC,CAAC,KAAK;oBACd,IAAI,EAAE,CAAC,CAAC,IAAI;iBACb,CAAC;gBAEF,OAAO,IAAI,CAAC;YACd,CAAC,CAAC;SACH,CAAC;QAEF,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF,CAAA;AAnCY,kCAAW;sBAAX,WAAW;IADvB,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,iBAAU,EAAE,SAAS,CAAC,CAAA;qCACP,oBAAU;GAHlC,WAAW,CAmCvB","sourcesContent":["import { Injectable, Post } from \"@nestjs/common\";\nimport { ApiMovedPermanentlyResponse } from \"@nestjs/swagger\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport moment from \"moment\";\nimport { CreateNewUserRequestDTO } from \"src/user/dto/user.dto\";\nimport { Repository } from \"typeorm\";\nimport {\n  CreateNewPostRequestDTO,\n  FetchPostsByUserIdResponse,\n  FetchPostsByUserIdResponseDTO,\n} from \"../dto/post.dto\";\nimport { PostEntity } from \"../entities/Post\";\n\n@Injectable()\nexport class PostService {\n  constructor(\n    @InjectRepository(PostEntity, \"sqlLite\")\n    private readonly postRepository: Repository<PostEntity>\n  ) {}\n\n  async createNewPost(createNewPostRequestDTO: CreateNewPostRequestDTO) {\n    let post: PostEntity = {\n      postid: null,\n      title: createNewPostRequestDTO.title,\n      body: createNewPostRequestDTO.body,\n      userid: createNewPostRequestDTO.userId,\n    };\n\n    return await this.postRepository.save(post);\n  }\n\n  async fetchPostsByUserId(\n    userId: number\n  ): Promise<FetchPostsByUserIdResponseDTO> {\n    let response: FetchPostsByUserIdResponseDTO = {\n      posts: (\n        await this.postRepository.find({ where: { userid: userId } })\n      ).map((x) => {\n        let post: FetchPostsByUserIdResponse = {\n          title: x.title,\n          body: x.body,\n        };\n\n        return post;\n      }),\n    };\n\n    return response;\n  }\n}\n"]}