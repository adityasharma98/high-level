{"version":3,"file":"rest.service.js","sourceRoot":"/","sources":["src/common/utils/rest/rest.service.ts"],"names":[],"mappings":";;;AAAA,iCAA0B;AAC1B,kDAAiD;AAEjD,MAAa,cAAc;IACjB,MAAM,CAAC,KAAK,CAAC,OAAO,CAC1B,MAAmB,EACnB,GAAW,EACX,IAAa,EACb,OAAyC,EACzC,OAAgB;QAEhB,IAAI,QAAgB,CAAC;QACrB,eAAK,CAAC,QAAQ,CAAC,mBAAmB,GAAG,eAAe,CAAC;QACrD,QAAQ,MAAM,EAAE;YACd,KAAK,KAAK;gBACR,QAAQ,GAAG,CACT,MAAM,eAAK,CAAC,GAAG,CAAS,GAAG,EAAE;oBAC3B,OAAO,kBAAI,cAAc,EAAE,kBAAkB,IAAK,OAAO,CAAE;oBAC3D,OAAO,EAAE,OAAO;iBACjB,CAAC,CACH,CAAC,IAAI,CAAC;gBACP,MAAM;YACR,KAAK,MAAM;gBACT,QAAQ,GAAG,CACT,MAAM,eAAK,CAAC,IAAI,CAAS,GAAG,EAAE,IAAI,EAAE;oBAClC,OAAO,kBAAI,cAAc,EAAE,kBAAkB,IAAK,OAAO,CAAE;oBAC3D,OAAO,EAAE,OAAO;iBACjB,CAAC,CACH,CAAC,IAAI,CAAC;gBACP,MAAM;YACR,KAAK,KAAK;gBACR,QAAQ,GAAG,CACT,MAAM,eAAK,CAAC,GAAG,CAAS,GAAG,EAAE,IAAI,EAAE;oBACjC,OAAO,kBAAI,cAAc,EAAE,kBAAkB,IAAK,OAAO,CAAE;oBAC3D,OAAO,EAAE,OAAO;iBACjB,CAAC,CACH,CAAC,IAAI,CAAC;gBACP,MAAM;YACR,KAAK,QAAQ;gBACX,QAAQ,GAAG,CACT,MAAM,eAAK,CAAC,MAAM,CAAS,GAAG,EAAE;oBAC9B,OAAO,kBAAI,cAAc,EAAE,kBAAkB,IAAK,OAAO,CAAE;oBAC3D,OAAO,EAAE,OAAO;iBACjB,CAAC,CACH,CAAC,IAAI,CAAC;gBACP,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,wBAAwB,MAAM,EAAE,CAAC,CAAC;SACrD;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,GAAG,CACd,GAAW,EACX,OAAyC,EACzC,OAAgB;QAEhB,OAAO,IAAI,CAAC,OAAO,CAAI,uBAAW,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACvE,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,IAAI,CACf,GAAW,EACX,IAAO,EACP,OAAyC,EACzC,OAAgB;QAEhB,OAAO,IAAI,CAAC,OAAO,CAAO,uBAAW,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC3E,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,GAAG,CACd,GAAW,EACX,IAAO,EACP,OAAyC,EACzC,OAAgB;QAEhB,OAAO,IAAI,CAAC,OAAO,CAAO,uBAAW,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC1E,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,MAAM,CACjB,GAAW,EACX,OAAyC,EACzC,OAAgB;QAEhB,OAAO,IAAI,CAAC,OAAO,CAAI,uBAAW,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC1E,CAAC;CACF;AAlFD,wCAkFC","sourcesContent":["import axios from \"axios\";\nimport { RestMethods } from \"../../../constants\";\n\nexport class RestApiService {\n  private static async callApi<ResObj, ReqObj = object>(\n    method: RestMethods,\n    url: string,\n    data?: ReqObj,\n    headers?: Record<string, string | number>,\n    timeout?: number\n  ) {\n    let response: ResObj;\n    axios.defaults.timeoutErrorMessage = \"TIMEOUT_ERROR\";\n    switch (method) {\n      case \"GET\":\n        response = (\n          await axios.get<ResObj>(url, {\n            headers: { \"Content-Type\": \"application/json\", ...headers },\n            timeout: timeout,\n          })\n        ).data;\n        break;\n      case \"POST\":\n        response = (\n          await axios.post<ResObj>(url, data, {\n            headers: { \"Content-Type\": \"application/json\", ...headers },\n            timeout: timeout,\n          })\n        ).data;\n        break;\n      case \"PUT\":\n        response = (\n          await axios.put<ResObj>(url, data, {\n            headers: { \"Content-Type\": \"application/json\", ...headers },\n            timeout: timeout,\n          })\n        ).data;\n        break;\n      case \"DELETE\":\n        response = (\n          await axios.delete<ResObj>(url, {\n            headers: { \"Content-Type\": \"application/json\", ...headers },\n            timeout: timeout,\n          })\n        ).data;\n        break;\n      default:\n        throw new Error(`Invalid HTTP method: ${method}`);\n    }\n    return response;\n  }\n\n  static async get<R>(\n    url: string,\n    headers?: Record<string, string | number>,\n    timeout?: number\n  ): Promise<R> {\n    return this.callApi<R>(RestMethods.GET, url, null, headers, timeout);\n  }\n\n  static async post<T, R>(\n    url: string,\n    data: T,\n    headers?: Record<string, string | number>,\n    timeout?: number\n  ): Promise<R> {\n    return this.callApi<R, T>(RestMethods.POST, url, data, headers, timeout);\n  }\n\n  static async put<T, R>(\n    url: string,\n    data: T,\n    headers?: Record<string, string | number>,\n    timeout?: number\n  ): Promise<R> {\n    return this.callApi<R, T>(RestMethods.PUT, url, data, headers, timeout);\n  }\n\n  static async delete<R>(\n    url: string,\n    headers?: Record<string, string | number>,\n    timeout?: number\n  ): Promise<R> {\n    return this.callApi<R>(RestMethods.DELETE, url, null, headers, timeout);\n  }\n}\n"]}