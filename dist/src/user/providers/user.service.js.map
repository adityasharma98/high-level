{"version":3,"file":"user.service.js","sourceRoot":"/","sources":["src/user/providers/user.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport * as moment from \"moment\";\nimport { Company } from \"src/user/entities/Company\";\nimport { Repository } from \"typeorm\";\nimport {\n  CreateNewUserRequestDTO,\n  FetchFollowersByUserIdResponseDTO,\n  FollowUserRequestDTO,\n} from \"../dto/user.dto\";\nimport { Followers } from \"../entities/Followers\";\nimport { UserEntity } from \"../entities/User\";\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserEntity, \"sqlLite\")\n    private readonly userRepository: Repository<UserEntity>,\n    @InjectRepository(Followers, \"sqlLite\")\n    private readonly followersRepository: Repository<Followers>\n  ) {}\n\n  async createNewUser(createNewUserRequestDTO: CreateNewUserRequestDTO) {\n    await this.validateNewUserRequest(createNewUserRequestDTO);\n\n    let user: UserEntity = {\n      userid: null,\n      name: createNewUserRequestDTO.name,\n      handle: createNewUserRequestDTO.handle,\n      dob: createNewUserRequestDTO.dob,\n      password: createNewUserRequestDTO.password,\n    };\n\n    return (await this.userRepository.save(user)).userid;\n  }\n\n  async validateNewUserRequest(\n    createNewUserRequestDTO: CreateNewUserRequestDTO\n  ) {\n    let response = await this.userRepository.find({\n      where: { handle: createNewUserRequestDTO.handle },\n    });\n\n    let handleAlreadyExists =\n      (\n        await this.userRepository.find({\n          where: { handle: createNewUserRequestDTO.handle },\n        })\n      )?.length > 0;\n\n    if (handleAlreadyExists) {\n      throw new HttpException(\"Handle already exists\", HttpStatus.BAD_REQUEST);\n    }\n\n    if (createNewUserRequestDTO.name.length > 20) {\n      throw new HttpException(\n        \"Name should be less than 20 characters\",\n        HttpStatus.BAD_REQUEST\n      );\n    }\n\n    let a = moment();\n    let b = moment(createNewUserRequestDTO.dob, \"YYYY-MM-DDTHH:mm:ss\");\n    var yearDiff = a.diff(b, \"years\");\n\n    if (yearDiff < 18) {\n      throw new HttpException(\n        \"Age should be more than 18 yrs\",\n        HttpStatus.BAD_REQUEST\n      );\n    }\n  }\n\n  async followUser(\n    followUserRequestDTO: FollowUserRequestDTO\n  ): Promise<boolean> {\n    let userToFollow = await this.userRepository.find({\n      where: { handle: followUserRequestDTO.followUserHandle },\n    });\n\n    if (!userToFollow || userToFollow.length == 0) {\n      throw new HttpException(\n        \"User handle is not valid.\",\n        HttpStatus.BAD_REQUEST\n      );\n    }\n\n    let currentUser = await this.userRepository.find({\n      where: { userid: followUserRequestDTO.userId },\n    });\n\n    if (!currentUser || currentUser.length == 0) {\n      throw new HttpException(\n        \"Invalid user making request.\",\n        HttpStatus.BAD_REQUEST\n      );\n    }\n\n    let followersObject: Followers = {\n      id: null,\n      primaryuserid: followUserRequestDTO.userId,\n      secondaryuserid: userToFollow[0].userid,\n    };\n\n    this.followersRepository.save(followersObject);\n\n    return true;\n  }\n\n  async fetchFollowersByUserId(\n    userId: number\n  ): Promise<FetchFollowersByUserIdResponseDTO> {\n    let response: FetchFollowersByUserIdResponseDTO = {\n      userIds: (\n        await this.followersRepository.find({\n          where: { primaryuserid: userId },\n        })\n      ).map((x) => x.secondaryuserid),\n    };\n\n    return response;\n  }\n}\n"]}